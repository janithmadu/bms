generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// NextAuth.js Models
model Account {
  id                String   @id @default(cuid())
  userId            String    @db.VarChar(5)
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String   @db.VarChar(5)
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
   id              String    @id @default(cuid()) @db.VarChar(5)
  name            String?
  email           String    @unique
  emailVerified   DateTime?
  image           String?
  role            String    @default("user") // admin, manager, user
  status          String    @default("active") // active, inactive
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  accounts        Account[]
  sessions        Session[]
  password        String
  tokensAvailable Int       @default(0)
  tokensUsed      Int       @default(0)
  tokenLimit      Int       @default(40) // Monthly limit per user
  lastTokenReset  DateTime  @default(now())

  // Location access for managers and users
  userLocations   UserLocation[]

  // Relation with Booking
  bookings        Booking[]

  @@index([email])
  @@index([role])
  @@index([status])
}

model UserLocation {
  id         String   @id @default(cuid())
  userId     String @db.VarChar(5)
  locationId String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  location   Location @relation(fields: [locationId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())

  @@unique([userId, locationId])
  @@index([userId])
  @@index([locationId])
}

model VerificationToken {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())

  @@unique([identifier, token])
  @@index([identifier, token])
}


// Application Models
model Location {
  id          String      @id @default(cuid())
  name        String
  address     String
  description String?     @db.Text
  imageUrl    String?     @db.Text
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  boardrooms  Boardroom[]
  userLocations UserLocation[]

  @@index([name])
}

model Boardroom {
  id              String    @id @default(cuid())
  name            String
  description     String?   @db.Text
  dimensions      String?   // e.g., "20ft x 15ft"
  capacity        Int
  imageUrl        String?  @db.Text
  facilities      Json      // Using Json type for array of facilities
  pricingOptions  Json  @default("[]")     // Using Json type for array of pricing options
  locationId      String
  location        Location  @relation(fields: [locationId], references: [id], onDelete: Cascade)
  bookings        Booking[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@index([locationId])
  @@index([name])
  @@index([capacity])
}

model Booking {
  id          String    @id @default(cuid())
  eventTitle  String
  bookerName  String
  bookerEmail String
  date        DateTime  // Date portion only for the booking day
  startTime   DateTime  // Full datetime for start
  endTime     DateTime  // Full datetime for end
  duration    Float     // Duration in hours
  tokensUsed  Int
  status      String    @default("pending") // pending, confirmed, cancelled
  boardroomId String
  boardroom   Boardroom @relation(fields: [boardroomId], references: [id], onDelete: Cascade)
  UserID String @default("") @db.VarChar(5)
  // Relation with User
  bookerId    String  @default("7Wcpw") @db.VarChar(5)
  booker      User      @relation(fields: [bookerId], references: [id], onDelete: Cascade) 
  isExsisting Boolean @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  phoneNumber String    @default("")
  price       String     @default("")
  @@index([boardroomId])
  @@index([date])
  @@index([startTime, endTime])
  @@index([bookerEmail])
  @@index([status])
  @@index([createdAt])
  @@index([bookerId])
}
model Token {
  id                 String   @id @default("singleton")
  initialCount       Int      @default(40)
  availableCount     Int      @default(40)
  tokensUsedThisMonth Int     @default(0)
  lastRenewalDate    DateTime @default(now())
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

model Business {
  id          String @id @default(cuid())
  name        String
  LogoUrl     String
  Description String
  Batch       String
}
